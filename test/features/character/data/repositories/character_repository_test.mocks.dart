// Mocks generated by Mockito 5.4.4 from annotations
// in open_pass_test_oliva_patricio/test/features/character/data/repositories/character_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:open_pass_test_oliva_patricio/core/entities/filter.dart' as _i7;
import 'package:open_pass_test_oliva_patricio/core/services/http_service.dart'
    as _i2;
import 'package:open_pass_test_oliva_patricio/features/character/data/data_sources/character_local_data_source.dart'
    as _i3;
import 'package:open_pass_test_oliva_patricio/features/character/data/data_sources/character_remote_data_source.dart'
    as _i5;
import 'package:open_pass_test_oliva_patricio/features/character/domain/entities/character.dart'
    as _i8;
import 'package:open_pass_test_oliva_patricio/features/character/domain/entities/characters_response.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpServiceBase_0 extends _i1.SmartFake
    implements _i2.HttpServiceBase {
  _FakeHttpServiceBase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCharacterLocalDataSourceBase_1 extends _i1.SmartFake
    implements _i3.CharacterLocalDataSourceBase {
  _FakeCharacterLocalDataSourceBase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCharactersResponse_2 extends _i1.SmartFake
    implements _i4.CharactersResponse {
  _FakeCharactersResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CharacterRemoteDataSourceBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacterRemoteDataSourceBase extends _i1.Mock
    implements _i5.CharacterRemoteDataSourceBase {
  MockCharacterRemoteDataSourceBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpServiceBase get http => (super.noSuchMethod(
        Invocation.getter(#http),
        returnValue: _FakeHttpServiceBase_0(
          this,
          Invocation.getter(#http),
        ),
      ) as _i2.HttpServiceBase);

  @override
  _i3.CharacterLocalDataSourceBase get local => (super.noSuchMethod(
        Invocation.getter(#local),
        returnValue: _FakeCharacterLocalDataSourceBase_1(
          this,
          Invocation.getter(#local),
        ),
      ) as _i3.CharacterLocalDataSourceBase);

  @override
  _i6.Future<_i4.CharactersResponse> getCharacters(_i7.Filter? filter) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCharacters,
          [filter],
        ),
        returnValue:
            _i6.Future<_i4.CharactersResponse>.value(_FakeCharactersResponse_2(
          this,
          Invocation.method(
            #getCharacters,
            [filter],
          ),
        )),
      ) as _i6.Future<_i4.CharactersResponse>);
}

/// A class which mocks [CharacterLocalDataSourceBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacterLocalDataSourceBase extends _i1.Mock
    implements _i3.CharacterLocalDataSourceBase {
  MockCharacterLocalDataSourceBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> saveCharacter(_i8.Character? character) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCharacter,
          [character],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> removeCharacter(int? characterId) => (super.noSuchMethod(
        Invocation.method(
          #removeCharacter,
          [characterId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> isCharacterSaved(int? characterId) => (super.noSuchMethod(
        Invocation.method(
          #isCharacterSaved,
          [characterId],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<List<_i8.Character>> getAllCharacters() => (super.noSuchMethod(
        Invocation.method(
          #getAllCharacters,
          [],
        ),
        returnValue: _i6.Future<List<_i8.Character>>.value(<_i8.Character>[]),
      ) as _i6.Future<List<_i8.Character>>);
}
