// Mocks generated by Mockito 5.4.4 from annotations
// in open_pass_test_oliva_patricio/test/features/character/presentation/manager/character_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:core_encode/core_encode.dart' as _i6;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:open_pass_test_oliva_patricio/core/entities/filter.dart' as _i8;
import 'package:open_pass_test_oliva_patricio/features/character/domain/entities/character.dart'
    as _i10;
import 'package:open_pass_test_oliva_patricio/features/character/domain/entities/characters_response.dart'
    as _i7;
import 'package:open_pass_test_oliva_patricio/features/character/domain/repositories/character_repository_base.dart'
    as _i2;
import 'package:open_pass_test_oliva_patricio/features/character/domain/use_cases/get_characters_use_case.dart'
    as _i4;
import 'package:open_pass_test_oliva_patricio/features/character/domain/use_cases/get_favorite_characters_use_case.dart'
    as _i9;
import 'package:open_pass_test_oliva_patricio/features/character/domain/use_cases/remove_favorite_character_use_case.dart'
    as _i12;
import 'package:open_pass_test_oliva_patricio/features/character/domain/use_cases/save_favorite_character_use_case.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCharacterRepositoryBase_0 extends _i1.SmartFake
    implements _i2.CharacterRepositoryBase {
  _FakeCharacterRepositoryBase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCharactersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCharactersUseCase extends _i1.Mock
    implements _i4.GetCharactersUseCase {
  MockGetCharactersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CharacterRepositoryBase get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCharacterRepositoryBase_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CharacterRepositoryBase);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.CharactersResponse>> call(
          _i8.Filter? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.CharactersResponse>>.value(
                _FakeEither_1<_i6.Failure, _i7.CharactersResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.CharactersResponse>>);
}

/// A class which mocks [GetFavoriteCharactersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFavoriteCharactersUseCase extends _i1.Mock
    implements _i9.GetFavoriteCharactersUseCase {
  MockGetFavoriteCharactersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CharacterRepositoryBase get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCharacterRepositoryBase_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CharacterRepositoryBase);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i10.Character>>> call(
          _i6.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Character>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Character>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i10.Character>>>);
}

/// A class which mocks [SaveFavoriteCharacterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveFavoriteCharacterUseCase extends _i1.Mock
    implements _i11.SaveFavoriteCharacterUseCase {
  MockSaveFavoriteCharacterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CharacterRepositoryBase get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCharacterRepositoryBase_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CharacterRepositoryBase);

  @override
  _i5.Future<_i3.Either<_i6.Failure, int>> call(_i10.Character? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, int>>.value(
            _FakeEither_1<_i6.Failure, int>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, int>>);
}

/// A class which mocks [RemoveFavoriteCharacterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveFavoriteCharacterUseCase extends _i1.Mock
    implements _i12.RemoveFavoriteCharacterUseCase {
  MockRemoveFavoriteCharacterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CharacterRepositoryBase get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCharacterRepositoryBase_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CharacterRepositoryBase);

  @override
  _i5.Future<_i3.Either<_i6.Failure, int>> call(int? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, int>>.value(
            _FakeEither_1<_i6.Failure, int>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, int>>);
}
